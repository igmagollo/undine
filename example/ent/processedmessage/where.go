// Code generated by ent, DO NOT EDIT.

package processedmessage

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/igmagollo/undine/example/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.ProcessedMessage {
	return predicate.ProcessedMessage(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.ProcessedMessage {
	return predicate.ProcessedMessage(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.ProcessedMessage {
	return predicate.ProcessedMessage(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.ProcessedMessage {
	return predicate.ProcessedMessage(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.ProcessedMessage {
	return predicate.ProcessedMessage(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.ProcessedMessage {
	return predicate.ProcessedMessage(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.ProcessedMessage {
	return predicate.ProcessedMessage(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.ProcessedMessage {
	return predicate.ProcessedMessage(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.ProcessedMessage {
	return predicate.ProcessedMessage(sql.FieldLTE(FieldID, id))
}

// MessageID applies equality check predicate on the "message_id" field. It's identical to MessageIDEQ.
func MessageID(v uuid.UUID) predicate.ProcessedMessage {
	return predicate.ProcessedMessage(sql.FieldEQ(FieldMessageID, v))
}

// MessageTopic applies equality check predicate on the "message_topic" field. It's identical to MessageTopicEQ.
func MessageTopic(v string) predicate.ProcessedMessage {
	return predicate.ProcessedMessage(sql.FieldEQ(FieldMessageTopic, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.ProcessedMessage {
	return predicate.ProcessedMessage(sql.FieldEQ(FieldCreatedAt, v))
}

// MessageIDEQ applies the EQ predicate on the "message_id" field.
func MessageIDEQ(v uuid.UUID) predicate.ProcessedMessage {
	return predicate.ProcessedMessage(sql.FieldEQ(FieldMessageID, v))
}

// MessageIDNEQ applies the NEQ predicate on the "message_id" field.
func MessageIDNEQ(v uuid.UUID) predicate.ProcessedMessage {
	return predicate.ProcessedMessage(sql.FieldNEQ(FieldMessageID, v))
}

// MessageIDIn applies the In predicate on the "message_id" field.
func MessageIDIn(vs ...uuid.UUID) predicate.ProcessedMessage {
	return predicate.ProcessedMessage(sql.FieldIn(FieldMessageID, vs...))
}

// MessageIDNotIn applies the NotIn predicate on the "message_id" field.
func MessageIDNotIn(vs ...uuid.UUID) predicate.ProcessedMessage {
	return predicate.ProcessedMessage(sql.FieldNotIn(FieldMessageID, vs...))
}

// MessageIDGT applies the GT predicate on the "message_id" field.
func MessageIDGT(v uuid.UUID) predicate.ProcessedMessage {
	return predicate.ProcessedMessage(sql.FieldGT(FieldMessageID, v))
}

// MessageIDGTE applies the GTE predicate on the "message_id" field.
func MessageIDGTE(v uuid.UUID) predicate.ProcessedMessage {
	return predicate.ProcessedMessage(sql.FieldGTE(FieldMessageID, v))
}

// MessageIDLT applies the LT predicate on the "message_id" field.
func MessageIDLT(v uuid.UUID) predicate.ProcessedMessage {
	return predicate.ProcessedMessage(sql.FieldLT(FieldMessageID, v))
}

// MessageIDLTE applies the LTE predicate on the "message_id" field.
func MessageIDLTE(v uuid.UUID) predicate.ProcessedMessage {
	return predicate.ProcessedMessage(sql.FieldLTE(FieldMessageID, v))
}

// MessageTopicEQ applies the EQ predicate on the "message_topic" field.
func MessageTopicEQ(v string) predicate.ProcessedMessage {
	return predicate.ProcessedMessage(sql.FieldEQ(FieldMessageTopic, v))
}

// MessageTopicNEQ applies the NEQ predicate on the "message_topic" field.
func MessageTopicNEQ(v string) predicate.ProcessedMessage {
	return predicate.ProcessedMessage(sql.FieldNEQ(FieldMessageTopic, v))
}

// MessageTopicIn applies the In predicate on the "message_topic" field.
func MessageTopicIn(vs ...string) predicate.ProcessedMessage {
	return predicate.ProcessedMessage(sql.FieldIn(FieldMessageTopic, vs...))
}

// MessageTopicNotIn applies the NotIn predicate on the "message_topic" field.
func MessageTopicNotIn(vs ...string) predicate.ProcessedMessage {
	return predicate.ProcessedMessage(sql.FieldNotIn(FieldMessageTopic, vs...))
}

// MessageTopicGT applies the GT predicate on the "message_topic" field.
func MessageTopicGT(v string) predicate.ProcessedMessage {
	return predicate.ProcessedMessage(sql.FieldGT(FieldMessageTopic, v))
}

// MessageTopicGTE applies the GTE predicate on the "message_topic" field.
func MessageTopicGTE(v string) predicate.ProcessedMessage {
	return predicate.ProcessedMessage(sql.FieldGTE(FieldMessageTopic, v))
}

// MessageTopicLT applies the LT predicate on the "message_topic" field.
func MessageTopicLT(v string) predicate.ProcessedMessage {
	return predicate.ProcessedMessage(sql.FieldLT(FieldMessageTopic, v))
}

// MessageTopicLTE applies the LTE predicate on the "message_topic" field.
func MessageTopicLTE(v string) predicate.ProcessedMessage {
	return predicate.ProcessedMessage(sql.FieldLTE(FieldMessageTopic, v))
}

// MessageTopicContains applies the Contains predicate on the "message_topic" field.
func MessageTopicContains(v string) predicate.ProcessedMessage {
	return predicate.ProcessedMessage(sql.FieldContains(FieldMessageTopic, v))
}

// MessageTopicHasPrefix applies the HasPrefix predicate on the "message_topic" field.
func MessageTopicHasPrefix(v string) predicate.ProcessedMessage {
	return predicate.ProcessedMessage(sql.FieldHasPrefix(FieldMessageTopic, v))
}

// MessageTopicHasSuffix applies the HasSuffix predicate on the "message_topic" field.
func MessageTopicHasSuffix(v string) predicate.ProcessedMessage {
	return predicate.ProcessedMessage(sql.FieldHasSuffix(FieldMessageTopic, v))
}

// MessageTopicEqualFold applies the EqualFold predicate on the "message_topic" field.
func MessageTopicEqualFold(v string) predicate.ProcessedMessage {
	return predicate.ProcessedMessage(sql.FieldEqualFold(FieldMessageTopic, v))
}

// MessageTopicContainsFold applies the ContainsFold predicate on the "message_topic" field.
func MessageTopicContainsFold(v string) predicate.ProcessedMessage {
	return predicate.ProcessedMessage(sql.FieldContainsFold(FieldMessageTopic, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.ProcessedMessage {
	return predicate.ProcessedMessage(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.ProcessedMessage {
	return predicate.ProcessedMessage(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.ProcessedMessage {
	return predicate.ProcessedMessage(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.ProcessedMessage {
	return predicate.ProcessedMessage(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.ProcessedMessage {
	return predicate.ProcessedMessage(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.ProcessedMessage {
	return predicate.ProcessedMessage(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.ProcessedMessage {
	return predicate.ProcessedMessage(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.ProcessedMessage {
	return predicate.ProcessedMessage(sql.FieldLTE(FieldCreatedAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ProcessedMessage) predicate.ProcessedMessage {
	return predicate.ProcessedMessage(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ProcessedMessage) predicate.ProcessedMessage {
	return predicate.ProcessedMessage(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ProcessedMessage) predicate.ProcessedMessage {
	return predicate.ProcessedMessage(sql.NotPredicates(p))
}
