// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/igmagollo/undine/example/ent/processedmessage"
)

// ProcessedMessageCreate is the builder for creating a ProcessedMessage entity.
type ProcessedMessageCreate struct {
	config
	mutation *ProcessedMessageMutation
	hooks    []Hook
}

// SetMessageID sets the "message_id" field.
func (pmc *ProcessedMessageCreate) SetMessageID(u uuid.UUID) *ProcessedMessageCreate {
	pmc.mutation.SetMessageID(u)
	return pmc
}

// SetMessageTopic sets the "message_topic" field.
func (pmc *ProcessedMessageCreate) SetMessageTopic(s string) *ProcessedMessageCreate {
	pmc.mutation.SetMessageTopic(s)
	return pmc
}

// SetCreatedAt sets the "created_at" field.
func (pmc *ProcessedMessageCreate) SetCreatedAt(t time.Time) *ProcessedMessageCreate {
	pmc.mutation.SetCreatedAt(t)
	return pmc
}

// SetID sets the "id" field.
func (pmc *ProcessedMessageCreate) SetID(u uuid.UUID) *ProcessedMessageCreate {
	pmc.mutation.SetID(u)
	return pmc
}

// Mutation returns the ProcessedMessageMutation object of the builder.
func (pmc *ProcessedMessageCreate) Mutation() *ProcessedMessageMutation {
	return pmc.mutation
}

// Save creates the ProcessedMessage in the database.
func (pmc *ProcessedMessageCreate) Save(ctx context.Context) (*ProcessedMessage, error) {
	return withHooks(ctx, pmc.sqlSave, pmc.mutation, pmc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pmc *ProcessedMessageCreate) SaveX(ctx context.Context) *ProcessedMessage {
	v, err := pmc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pmc *ProcessedMessageCreate) Exec(ctx context.Context) error {
	_, err := pmc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pmc *ProcessedMessageCreate) ExecX(ctx context.Context) {
	if err := pmc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pmc *ProcessedMessageCreate) check() error {
	if _, ok := pmc.mutation.MessageID(); !ok {
		return &ValidationError{Name: "message_id", err: errors.New(`ent: missing required field "ProcessedMessage.message_id"`)}
	}
	if _, ok := pmc.mutation.MessageTopic(); !ok {
		return &ValidationError{Name: "message_topic", err: errors.New(`ent: missing required field "ProcessedMessage.message_topic"`)}
	}
	if _, ok := pmc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ProcessedMessage.created_at"`)}
	}
	return nil
}

func (pmc *ProcessedMessageCreate) sqlSave(ctx context.Context) (*ProcessedMessage, error) {
	if err := pmc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pmc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pmc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	pmc.mutation.id = &_node.ID
	pmc.mutation.done = true
	return _node, nil
}

func (pmc *ProcessedMessageCreate) createSpec() (*ProcessedMessage, *sqlgraph.CreateSpec) {
	var (
		_node = &ProcessedMessage{config: pmc.config}
		_spec = sqlgraph.NewCreateSpec(processedmessage.Table, sqlgraph.NewFieldSpec(processedmessage.FieldID, field.TypeUUID))
	)
	if id, ok := pmc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := pmc.mutation.MessageID(); ok {
		_spec.SetField(processedmessage.FieldMessageID, field.TypeUUID, value)
		_node.MessageID = value
	}
	if value, ok := pmc.mutation.MessageTopic(); ok {
		_spec.SetField(processedmessage.FieldMessageTopic, field.TypeString, value)
		_node.MessageTopic = value
	}
	if value, ok := pmc.mutation.CreatedAt(); ok {
		_spec.SetField(processedmessage.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	return _node, _spec
}

// ProcessedMessageCreateBulk is the builder for creating many ProcessedMessage entities in bulk.
type ProcessedMessageCreateBulk struct {
	config
	err      error
	builders []*ProcessedMessageCreate
}

// Save creates the ProcessedMessage entities in the database.
func (pmcb *ProcessedMessageCreateBulk) Save(ctx context.Context) ([]*ProcessedMessage, error) {
	if pmcb.err != nil {
		return nil, pmcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pmcb.builders))
	nodes := make([]*ProcessedMessage, len(pmcb.builders))
	mutators := make([]Mutator, len(pmcb.builders))
	for i := range pmcb.builders {
		func(i int, root context.Context) {
			builder := pmcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProcessedMessageMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pmcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pmcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pmcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pmcb *ProcessedMessageCreateBulk) SaveX(ctx context.Context) []*ProcessedMessage {
	v, err := pmcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pmcb *ProcessedMessageCreateBulk) Exec(ctx context.Context) error {
	_, err := pmcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pmcb *ProcessedMessageCreateBulk) ExecX(ctx context.Context) {
	if err := pmcb.Exec(ctx); err != nil {
		panic(err)
	}
}
