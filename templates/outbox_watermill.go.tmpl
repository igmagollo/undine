{{/* Tell Intellij/GoLand to enable the autocompletion based on the *gen.Graph type. */}}
{{/* gotype: entgo.io/ent/entc/gen.Graph */}}

{{ define "OutboxWatermill" }}
{{ $pkg := base $.Config.Package }}
{{ template "header" $ }}

import (
	"context"

	"github.com/ThreeDotsLabs/watermill/message"
)

type outboxStorerPublisher struct {
	storer *OutboxStorer
	ctx    context.Context // this struct is ephemeral
}

func (*outboxStorerPublisher) Close() error {
	return nil
}

func (o *outboxStorerPublisher) Publish(topic string, messages ...*message.Message) error {
	outboxMessages := make([]*OutboxStorerMessage, len(messages))
	for i, watermillMsg := range messages {
		outboxMessages[i] = &OutboxStorerMessage{
			Topic:   topic,
			Payload: watermillMsg.Payload,
			Headers: watermillMsg.Metadata,
		}
	}

	return o.storer.Store(o.ctx, outboxMessages...)
}

func NewOutboxStorerPublisher(ctx context.Context, storer *OutboxStorer) message.Publisher {
	return &outboxStorerPublisher{
		storer: storer,
		ctx:    ctx,
	}
}

{{ end }}
