{{/* Tell Intellij/GoLand to enable the autocompletion based on the *gen.Graph type. */}}
{{/* gotype: entgo.io/ent/entc/gen.Graph */}}

{{ define "OutboxStorer" }}
{{ $pkg := base $.Config.Package }}
{{ template "header" $ }}

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/google/uuid"
)

type OutboxStorerMessage struct {
	Topic   string
	Payload []byte
	Headers map[string]string
}

func (m *OutboxStorerMessage) Validate() error {
	var errs error = nil
	if m.Topic == "" {
		errs = errors.Join(errs, fmt.Errorf("topic is empty"))
	}

	if m.Payload == nil || len(m.Payload) == 0 {
		errs = errors.Join(errs, fmt.Errorf("payload is empty"))
	}

	if errs != nil {
		return errs
	}

	if m.Headers == nil {
		m.Headers = map[string]string{}
	}

	return nil
}

type OutboxStorer struct {
	tx *Tx
}

func NewOutboxStorer(tx *Tx) *OutboxStorer {
	return &OutboxStorer{
		tx: tx,
	}
}

func (o *OutboxStorer) Store(ctx context.Context, messages ...OutboxStorerMessage) error {
	if len(messages) == 0 {
		return nil
	}

	client := o.tx.Client()

	if err := o.validateMessages(messages); err != nil {
		return fmt.Errorf("validating messages: %w", err)
	}

	messagesToStore := make([]*OutboxCreate, len(messages))
	for i, m := range messages {
		messagesToStore[i] = client.Outbox.Create().
			SetTopic(m.Topic).
			SetPayload(m.Payload).
			SetHeaders(m.Headers).
			SetID(uuid.New()).
			SetCreatedAt(time.Now())
	}

	err := client.Outbox.CreateBulk(
		messagesToStore...,
	).Exec(ctx)
	if err != nil {
		return fmt.Errorf("creating outbox messages: %w", err)
	}

	return nil
}

func (o *OutboxStorer) validateMessages(messages []OutboxStorerMessage) error {
	var errs error = nil
	for i, m := range messages {
		if err := m.Validate(); err != nil {
			errs = errors.Join(errs, fmt.Errorf("validating message %d: %w", i, err))
		}
	}

	return errs
}

{{ end }}
