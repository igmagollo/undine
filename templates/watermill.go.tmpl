{{/* Tell Intellij/GoLand to enable the autocompletion based on the *gen.Graph type. */}}
{{/* gotype: entgo.io/ent/entc/gen.Graph */}}

{{ define "Watermill" }}
{{ $pkg := base $.Config.Package }}
{{ template "header" $ }}

import (
	"fmt"
	"sync"

	"github.com/ThreeDotsLabs/watermill/message"
)

type TransactionalRouter struct {
	*message.Router
	client *Client

	txHandlerLock sync.Mutex
	txHandlers    map[string]*message.Handler

	publisherDecorators []message.PublisherDecorator
}

func NewTransactionalRouter(client *Client, router *message.Router) *TransactionalRouter {
	return &TransactionalRouter{
		Router: router,
		client: client,
	}
}

func (r *TransactionalRouter) AddTransactionalHandler(
	handlerName string,
	subscribeTopic string,
	subscriber message.Subscriber,
	publishTopic string,
	handlerFunc message.HandlerFunc,
) *message.Handler {
	transactionalHandler := func(msg *message.Message) error {
		ctx := msg.Context()
		err := WithTx(ctx, r.client, func(tx *Tx) error {
			if err := NewProcessedMessageMarker(tx, subscribeTopic).MarkAsProcessed(ctx, msg); err != nil {
				return fmt.Errorf("marking message as processed: %w", err)
			}

			msgs, err := handlerFunc(msg)
			if err != nil {
				return fmt.Errorf("handling message: %w", err)
			}

			publisher := NewOutboxStorerPublisher(ctx, NewOutboxStorer(tx))
			publisher, err = r.decorateTxPublisher(publisher)
			if err != nil {
				return fmt.Errorf("decorating publisher: %w", err)
			}

			if err := publisher.Publish(publishTopic, msgs...); err != nil {
				return fmt.Errorf("storing messages: %w", err)
			}

			return nil
		})

		if !IsAlreadyProcessedError(err) {
			return err
		}

		return nil
	}

	r.txHandlerLock.Lock()
	defer r.txHandlerLock.Unlock()

	handler := r.AddNoPublisherHandler(handlerName, subscribeTopic, subscriber, transactionalHandler)
	if r.txHandlers == nil {
		r.txHandlers = map[string]*message.Handler{}
	}
	r.txHandlers[handlerName] = handler

	return handler
}

func (r *TransactionalRouter) AddPublisherDecorators(dec ...message.PublisherDecorator) {
	r.publisherDecorators = append(r.publisherDecorators, dec...)
	r.Router.AddPublisherDecorators(dec...)
}

func (r *TransactionalRouter) decorateTxPublisher(pub message.Publisher) (npub message.Publisher, err error) {
	npub = pub
	for _, dec := range r.publisherDecorators {
		npub, err = dec(npub)
		if err != nil {
			return nil, fmt.Errorf("decorating publisher: %w", err)
		}
	}
	return
}

{{ end }}
